import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, tap, retry } from 'rxjs/operators';
import { environment } from '../../environments/environment';

// API dokÃ¼mantasyonundaki interface'ler
export interface CalculateRequestDto {
  parameter1: number;
  parameter2: number;
}

export interface ResultDto {
  result: number;
  operation: 'ADDITION' | 'SUBTRACTION' | 'MULTIPLICATION' | 'DIVISION' | 'SQUARE_ROOT' | 'POWER';
}

export interface HistoryEntity {
  operation: 'ADDITION' | 'SUBTRACTION' | 'MULTIPLICATION' | 'DIVISION' | 'SQUARE_ROOT' | 'POWER';
  parameter1: number;
  parameter2: number;
  result: number;
  date: string; 
}

@Injectable({
  providedIn: 'root'
})
export class CalculatorApiService {
  private readonly baseUrl = environment.useProxy ? '' : environment.apiUrl;
  private readonly token = 'ipEjAfe1zXy1EAEsIzFQJacDCjcMDwJRt2rZIlIXoqb4e7TyE4HWM0A1bZSPDChB';

  constructor(private http: HttpClient) {}

  private getHeaders(): HttpHeaders {
    return new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${this.token}`
    });
  }

  private handleError(error: HttpErrorResponse): Observable<never> {
    console.error('ðŸš¨ API HatasÄ±:', {
      status: error.status,
      statusText: error.statusText,
      url: error.url,
      message: error.message,
      error: error.error
    });
    
    let errorMessage = 'Bilinmeyen hata';
    
    if (error.status === 0) {
      errorMessage = 'API sunucusuna baÄŸlanÄ±lamÄ±yor (CORS hatasÄ±)';
    } else if (error.status === 401) {
      errorMessage = 'Yetkilendirme hatasÄ± - GeÃ§ersiz token';
    } else if (error.status === 403) {
      errorMessage = 'EriÅŸim reddedildi';
    } else if (error.status === 404) {
      errorMessage = 'API endpoint bulunamadÄ±';
    } else if (error.status >= 500) {
      errorMessage = 'Sunucu hatasÄ±';
    } else if (error.error?.message) {
      errorMessage = error.error.message;
    }
    
    return throwError(() => new Error(errorMessage));
  }

  // Calculator API metodlarÄ±
  add(parameter1: number, parameter2: number): Observable<ResultDto> {
    const url = `${this.baseUrl}/api/calculator/add`;
    const body: CalculateRequestDto = { parameter1, parameter2 };
    
    console.log('ðŸ“¡ Toplama API Ã§aÄŸrÄ±sÄ±:', { url, body });
    
    return this.http.post<ResultDto>(url, body, { headers: this.getHeaders() }).pipe(
      tap(response => console.log('âœ… Toplama baÅŸarÄ±lÄ±:', response)),
      retry(1),
      catchError(this.handleError.bind(this))
    );
  }

  subtract(parameter1: number, parameter2: number): Observable<ResultDto> {
    const url = `${this.baseUrl}/api/calculator/subtract`;
    const body: CalculateRequestDto = { parameter1, parameter2 };
    
    console.log('ðŸ“¡ Ã‡Ä±karma API Ã§aÄŸrÄ±sÄ±:', { url, body });
    
    return this.http.post<ResultDto>(url, body, { headers: this.getHeaders() }).pipe(
      tap(response => console.log('âœ… Ã‡Ä±karma baÅŸarÄ±lÄ±:', response)),
      retry(1),
      catchError(this.handleError.bind(this))
    );
  }

  multiply(parameter1: number, parameter2: number): Observable<ResultDto> {
    const url = `${this.baseUrl}/api/calculator/multiply`;
    const body: CalculateRequestDto = { parameter1, parameter2 };
    
    console.log('ðŸ“¡ Ã‡arpma API Ã§aÄŸrÄ±sÄ±:', { url, body });
    
    return this.http.post<ResultDto>(url, body, { headers: this.getHeaders() }).pipe(
      tap(response => console.log('âœ… Ã‡arpma baÅŸarÄ±lÄ±:', response)),
      retry(1),
      catchError(this.handleError.bind(this))
    );
  }

  divide(parameter1: number, parameter2: number): Observable<ResultDto> {
    const url = `${this.baseUrl}/api/calculator/divide`;
    const body: CalculateRequestDto = { parameter1, parameter2 };
    
    console.log('ðŸ“¡ BÃ¶lme API Ã§aÄŸrÄ±sÄ±:', { url, body });
    
    return this.http.post<ResultDto>(url, body, { headers: this.getHeaders() }).pipe(
      tap(response => console.log('âœ… BÃ¶lme baÅŸarÄ±lÄ±:', response)),
      retry(1),
      catchError(this.handleError.bind(this))
    );
  }

  power(parameter1: number, parameter2: number): Observable<ResultDto> {
    const url = `${this.baseUrl}/api/calculator/power`;
    const body: CalculateRequestDto = { parameter1, parameter2 };
    
    console.log('ðŸ“¡ Ãœs alma API Ã§aÄŸrÄ±sÄ±:', { url, body });
    
    return this.http.post<ResultDto>(url, body, { headers: this.getHeaders() }).pipe(
      tap(response => console.log('âœ… Ãœs alma baÅŸarÄ±lÄ±:', response)),
      retry(1),
      catchError(this.handleError.bind(this))
    );
  }

  squareRoot(parameter1: number): Observable<ResultDto> {
    const url = `${this.baseUrl}/api/calculator/squareRoot`;
    const body: CalculateRequestDto = { parameter1, parameter2: 0 }; 
    
    console.log('ðŸ“¡ KarekÃ¶k API Ã§aÄŸrÄ±sÄ±:', { url, body });
    
    return this.http.post<ResultDto>(url, body, { headers: this.getHeaders() }).pipe(
      tap(response => console.log('âœ… KarekÃ¶k baÅŸarÄ±lÄ±:', response)),
      retry(1),
      catchError(this.handleError.bind(this))
    );
  }

  // History API metodlarÄ±
  getHistory(): Observable<HistoryEntity[]> {
    const url = `${this.baseUrl}/api/history/getHistory`;
    
    console.log('ðŸ“¡ History API Ã§aÄŸrÄ±sÄ±:', { url });
    
    return this.http.get<HistoryEntity[]>(url, { headers: this.getHeaders() }).pipe(
      tap(response => console.log('âœ… History baÅŸarÄ±lÄ±:', response)),
      retry(1),
      catchError(this.handleError.bind(this))
    );
  }

  getAllHistory(): Observable<HistoryEntity[]> {
    const url = `${this.baseUrl}/api/history/getAllHistory`;
    
    console.log('ðŸ“¡ All History API Ã§aÄŸrÄ±sÄ±:', { url });
    
    return this.http.get<HistoryEntity[]>(url, { headers: this.getHeaders() }).pipe(
      tap(response => console.log('âœ… All History baÅŸarÄ±lÄ±:', response)),
      retry(1),
      catchError(this.handleError.bind(this))
    );
  }

  clearHistory(): Observable<void> {
    const url = `${this.baseUrl}/api/history/clearHistory`;
    
    console.log('ðŸ“¡ Clear History API Ã§aÄŸrÄ±sÄ±:', { url });
    
    return this.http.delete<void>(url, { headers: this.getHeaders() }).pipe(
      tap(() => console.log('âœ… Clear History baÅŸarÄ±lÄ±')),
      retry(1),
      catchError(this.handleError.bind(this))
    );
  }

  // API operation enum'Ä±nÄ± local operation'a Ã§evir
  mapApiOperationToLocal(apiOperation: string): string {
    switch (apiOperation) {
      case 'ADDITION': return '+';
      case 'SUBTRACTION': return '-';
      case 'MULTIPLICATION': return 'Ã—';
      case 'DIVISION': return 'Ã·';
      case 'POWER': return '^';
      case 'SQUARE_ROOT': return 'âˆš';
      default: return apiOperation;
    }
  }

  // Local operation'Ä± API operation enum'Ä±na Ã§evir
  mapLocalOperationToApi(localOperation: string): string {
    switch (localOperation) {
      case '+': return 'ADDITION';
      case '-': return 'SUBTRACTION';
      case 'Ã—': return 'MULTIPLICATION';
      case 'Ã·': return 'DIVISION';
      case '^': return 'POWER';
      case 'âˆš': return 'SQUARE_ROOT';
      default: return localOperation;
    }
  }
} 